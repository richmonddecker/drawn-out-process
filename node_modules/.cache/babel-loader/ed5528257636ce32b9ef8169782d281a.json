{"ast":null,"code":"var sketch = function sketch(p) {\n  var radius = 0;\n  var lastMillis = 0;\n\n  function clearCircle() {\n    p.background(255);\n    p.drawBorder();\n  }\n\n  function resizeCircle() {\n    var newRadius = p.min(p.windowWidth, p.windowHeight) / 2;\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n    radius = newRadius;\n    p.clearCircle();\n  }\n\n  p.setup = function () {\n    radius = p.min(p.windowWidth, p.windowHeight) / 2;\n    p.createCanvas(2 * radius, 2 * radius);\n    p.colorMode(HSB, 1);\n    p.clearCircle();\n    p.makeTheButtons();\n    p.makeTheSliders();\n  };\n\n  p.draw = function () {\n    var ellapsed = getEllapsedTime();\n    var coords = getCoords();\n    var settings = getSettings();\n\n    if (shouldDraw()) {\n      makeLines(coords, settings, ellapsed);\n    }\n\n    drawBorder();\n  };\n\n  function drawBorder() {\n    var r = 10000;\n    p.push();\n    p.translate(p.width / 2, p.height / 2);\n    p.stroke(0);\n    p.noFill();\n    p.strokeWeight(r - 2 * radius);\n    p.ellipse(0, 0, r, r);\n    p.pop();\n  }\n\n  function getCoords() {\n    var x = p.mouseX - p.width / 2;\n    var y = p.mouseY - p.height / 2;\n    return {\n      x: x,\n      y: y,\n      r: p.sqrt(p.sq(x) + p.sq(y)),\n      th: p.PI + p.atan2(y, x)\n    };\n  }\n\n  function getColor(coords, settings) {\n    if (coords.r > radius) {\n      return color(0, 0, 0, 1);\n    }\n\n    h = (settings.hueCycles * (coords.th / TWO_PI + 1.75) + 1 + settings.hueOffset / 360.0) % 1.0;\n    s = p.pow(coords.r / radius, 1.0 / settings.colorPower);\n    b = 0.5 + 0.5 * p.pow(coords.r / radius, 1.0 / settings.colorPower);\n    a = settings.lineAlpha / 100.0;\n    return p.color(h, s, b, a);\n  }\n\n  function getAngleSpan(coords, settings) {\n    return p.PI * p.pow((radius - coords.r) / radius, settings.spanPower);\n  }\n\n  function getEllapsedTime() {\n    var nextMillis = p.millis();\n    var ellapsed = nextMillis - lastMillis;\n    lastMillis = nextMillis;\n    return ellapsed / 1000.0;\n  }\n\n  function getNumLines(settings, ellapsed) {\n    var factor = ellapsed * settings.lineSpeed;\n    var numLines = p.floor(factor);\n\n    if (p.random(0, 1) < factor % 1) {\n      numLines += 1;\n    }\n\n    return numLines;\n  }\n\n  function drawLine(span) {\n    p.push();\n    p.rotate(p.random(-span / 2, span / 2));\n    p.line(0, -2 * radius, 0, 2 * radius);\n    p.pop();\n  }\n\n  function makeLines(coords, settings, ellapsed) {\n    if (coords.r > radius) {\n      return;\n    }\n\n    var numLines = getNumLines(settings, ellapsed);\n    var span = getAngleSpan(coords, settings);\n    p.push();\n    p.translate(coords.x + p.width / 2, coords.y + p.height / 2);\n    p.rotate(coords.th);\n    p.strokeWeight(settings.lineThickness);\n    p.stroke(getColor(coords, settings));\n\n    for (var i = 0; i < numLines; i++) {\n      drawLine(span);\n    }\n\n    p.pop();\n  }\n\n  function toggleFullscreen() {\n    p.fullscreen(!p.fullscreen());\n  }\n\n  function shouldDraw() {\n    return p.mouseIsPressed;\n  }\n};\n\nexport default sketch; // function makeTheButtons() {\n//   let button;\n//     button = createButton(\"Reset\");\n//     button.mouseClicked(resizeCircle);\n//     button.position(20, 20);\n//     button = createButton(\"Full Screen\");\n//     button.mouseClicked(toggleFullscreen);\n//     button.position(20, 40);\n// }\n// function makeTheSliders() {\n//   sliders = {};\n//   sliders.hueCycles = createSlider(0, 36, 6, 1);\n//   sliders.hueCycles.position(20, 60);\n//   sliders.lineSpeed = createSlider(1, 10000, 1000);\n//   sliders.lineSpeed.position(20, 80);\n//   sliders.lineThickness = createSlider(1, 20, 1, 1);\n//   sliders.lineThickness.position(20, 100);\n//   sliders.lineAlpha = createSlider(1, 100, 50, 1);\n//   sliders.lineAlpha.position(20, 120);\n//   sliders.spanPower = createSlider(0.1, 10, 1, 0.1);\n//   sliders.spanPower.position(20, 140);\n//   sliders.colorPower = createSlider(0.1, 10, 2, 0.1);\n//   sliders.colorPower.position(20, 160);\n//   sliders.hueOffset = createSlider(0, 360, 0, 1);\n//   sliders.hueOffset.position(20, 180);\n// }\n// function getSettings() {\n//   return {\n//     hueCycles: sliders.hueCycles.value(),\n//     lineSpeed: sliders.lineSpeed.value(),\n//     lineThickness: sliders.lineThickness.value(),\n//     lineAlpha: sliders.lineAlpha.value(),\n//     spanPower: sliders.spanPower.value(),\n//     colorPower: sliders.colorPower.value(),\n//     hueOffset: sliders.hueOffset.value()\n//   }\n// }","map":{"version":3,"sources":["/Users/richmonddecker/Documents/DrawnOutProcess/drawn-out-process/src/sketches/chord-art.js"],"names":["sketch","p","radius","lastMillis","clearCircle","background","drawBorder","resizeCircle","newRadius","min","windowWidth","windowHeight","resizeCanvas","setup","createCanvas","colorMode","HSB","makeTheButtons","makeTheSliders","draw","ellapsed","getEllapsedTime","coords","getCoords","settings","getSettings","shouldDraw","makeLines","r","push","translate","width","height","stroke","noFill","strokeWeight","ellipse","pop","x","mouseX","y","mouseY","sqrt","sq","th","PI","atan2","getColor","color","h","hueCycles","TWO_PI","hueOffset","s","pow","colorPower","b","a","lineAlpha","getAngleSpan","spanPower","nextMillis","millis","getNumLines","factor","lineSpeed","numLines","floor","random","drawLine","span","rotate","line","lineThickness","i","toggleFullscreen","fullscreen","mouseIsPressed"],"mappings":"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","sourcesContent":["const sketch = (p) => {\n  let radius = 0;\n  let lastMillis = 0;\n\n  function clearCircle() {\n    p.background(255);\n    p.drawBorder();\n  }\n\n  function resizeCircle() {\n    let newRadius = p.min(p.windowWidth, p.windowHeight) / 2;\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n    radius = newRadius;\n    p.clearCircle();\n  }\n\n  p.setup = function() {\n    radius = p.min(p.windowWidth, p.windowHeight) / 2;\n    p.createCanvas(2 * radius, 2 * radius);\n    p.colorMode(HSB, 1);\n    p.clearCircle();\n    p.makeTheButtons();\n    p.makeTheSliders();\n  }\n\n  p.draw = function() {\n    let ellapsed = getEllapsedTime();\n    let coords = getCoords();\n    let settings = getSettings();\n    if (shouldDraw()) {\n      makeLines(coords, settings, ellapsed);\n    }\n    drawBorder();\n  }\n\n  function drawBorder() {\n    let r = 10000;\n    p.push();\n    p.translate(p.width/2, p.height/2);\n    p.stroke(0);\n    p.noFill();\n    p.strokeWeight(r - 2 * radius);\n    p.ellipse(0, 0, r, r);\n    p.pop();\n  }\n\n  function getCoords() {\n    let x = p.mouseX - p.width/2;\n    let y = p.mouseY - p.height/2;\n    return {\n      x: x,\n      y: y,\n      r: p.sqrt(p.sq(x) + p.sq(y)),\n      th: p.PI + p.atan2(y, x)\n    };\n  }\n\n  function getColor(coords, settings) {\n    if (coords.r > radius) {\n      return color(0, 0, 0, 1);\n    }\n    h = (settings.hueCycles * (coords.th / TWO_PI + 1.75) + 1 + settings.hueOffset / 360.0) % 1.0\n    s = p.pow(coords.r / radius, 1.0 / settings.colorPower);\n    b = (0.5 + 0.5 * p.pow(coords.r / radius, 1.0 / settings.colorPower));\n    a = settings.lineAlpha / 100.0;\n    return p.color(h, s, b, a);\n  }\n\n  function getAngleSpan(coords, settings) {\n    return p.PI * p.pow((radius - coords.r) / radius, settings.spanPower);\n  }\n\n  function getEllapsedTime() {\n    let nextMillis = p.millis();\n    let ellapsed = nextMillis - lastMillis;\n    lastMillis = nextMillis;\n    return ellapsed / 1000.0;\n  }\n\n  function getNumLines(settings, ellapsed) {\n    let factor = ellapsed * settings.lineSpeed;\n    let numLines = p.floor(factor);\n    if (p.random(0, 1) < factor % 1) {\n      numLines += 1;\n    }\n    return numLines;\n  }\n\n  function drawLine(span) {\n    p.push();\n    p.rotate(p.random(-span/2, span/2));\n    p.line(0, -2 * radius, 0, 2 * radius);\n    p.pop();\n  }\n\n  function makeLines(coords, settings, ellapsed) {\n    if (coords.r > radius) {\n      return;\n    }\n    let numLines = getNumLines(settings, ellapsed);\n    let span = getAngleSpan(coords, settings);\n    p.push();\n    p.translate(coords.x + p.width/2, coords.y + p.height/2);\n    p.rotate(coords.th);\n    p.strokeWeight(settings.lineThickness);\n    p.stroke(getColor(coords, settings));\n    for (let i = 0; i < numLines; i++) {\n      drawLine(span);\n    }\n    p.pop();\n  }\n\n  function toggleFullscreen() {\n    p.fullscreen(!p.fullscreen());\n  }\n\n  function shouldDraw() {\n    return p.mouseIsPressed;\n  }\n};\n\nexport default sketch;\n\n// function makeTheButtons() {\n//   let button;\n    \n//     button = createButton(\"Reset\");\n//     button.mouseClicked(resizeCircle);\n//     button.position(20, 20);\n    \n//     button = createButton(\"Full Screen\");\n//     button.mouseClicked(toggleFullscreen);\n//     button.position(20, 40);\n// }\n\n\n// function makeTheSliders() {\n//   sliders = {};\n//   sliders.hueCycles = createSlider(0, 36, 6, 1);\n//   sliders.hueCycles.position(20, 60);\n//   sliders.lineSpeed = createSlider(1, 10000, 1000);\n//   sliders.lineSpeed.position(20, 80);\n//   sliders.lineThickness = createSlider(1, 20, 1, 1);\n//   sliders.lineThickness.position(20, 100);\n//   sliders.lineAlpha = createSlider(1, 100, 50, 1);\n//   sliders.lineAlpha.position(20, 120);\n//   sliders.spanPower = createSlider(0.1, 10, 1, 0.1);\n//   sliders.spanPower.position(20, 140);\n//   sliders.colorPower = createSlider(0.1, 10, 2, 0.1);\n//   sliders.colorPower.position(20, 160);\n//   sliders.hueOffset = createSlider(0, 360, 0, 1);\n//   sliders.hueOffset.position(20, 180);\n// }\n\n// function getSettings() {\n//   return {\n//     hueCycles: sliders.hueCycles.value(),\n//     lineSpeed: sliders.lineSpeed.value(),\n//     lineThickness: sliders.lineThickness.value(),\n//     lineAlpha: sliders.lineAlpha.value(),\n//     spanPower: sliders.spanPower.value(),\n//     colorPower: sliders.colorPower.value(),\n//     hueOffset: sliders.hueOffset.value()\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}