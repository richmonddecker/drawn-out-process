{"ast":null,"code":"var _jsxFileName = \"/Users/richmonddecker/Documents/DrawnOutProcess/drawn-out-process/src/components/FullscreenButton.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Glyphicon } from \"reactstrap\";\nimport { toggleFullScreen as _toggleFullScreen } from \"../actions/configuration\";\nimport { getContentFromTags } from \"../scripts/organization\";\n\nvar FullscreenButton = function FullscreenButton(props) {\n  var character = props.fullScreen ? React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"\\u292B\") : React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"\\u292E\");\n  console.log(getContentFromTags(\"repetitive\", \"kochpinski\"));\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"info\",\n    block: true,\n    outline: !props.fullScreen,\n    onClick: props.toggleFullScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"Full Screen     \", character));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    fullScreen: state.configuration.fullScreen\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    toggleFullScreen: function toggleFullScreen() {\n      return dispatch(_toggleFullScreen());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FullscreenButton);","map":{"version":3,"sources":["/Users/richmonddecker/Documents/DrawnOutProcess/drawn-out-process/src/components/FullscreenButton.jsx"],"names":["React","connect","Button","Glyphicon","toggleFullScreen","getContentFromTags","FullscreenButton","props","character","fullScreen","console","log","mapStateToProps","state","configuration","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,YAAlC;AAEA,SAASC,gBAAgB,IAAhBA,iBAAT,QAAiC,0BAAjC;AACA,SAASC,kBAAT,QAAmC,yBAAnC;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAW;AAClC,MAAMC,SAAS,GAAGD,KAAK,CAACE,UAAN,GAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAnB,GAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAvD;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,kBAAkB,CAAC,YAAD,EAAe,YAAf,CAA9B;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,MADR;AAEE,IAAA,KAAK,MAFP;AAGE,IAAA,OAAO,EAAE,CAACE,KAAK,CAACE,UAHlB;AAKE,IAAA,OAAO,EAAEF,KAAK,CAACH,gBALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOG,kBAPH,EAOuBI,SAPvB,CADF,CADF;AAaD,CAhBD;;AAkBA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCJ,IAAAA,UAAU,EAAEI,KAAK,CAACC,aAAN,CAAoBL;AADE,GAAZ;AAAA,CAAxB;;AAIA,IAAMM,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,SAAe;AACxCZ,IAAAA,gBAAgB,EAAE;AAAA,aAAMY,QAAQ,CAACZ,iBAAgB,EAAjB,CAAd;AAAA;AADsB,GAAf;AAAA,CAA3B;;AAIA,eAAeH,OAAO,CACpBW,eADoB,EAEpBG,kBAFoB,CAAP,CAGbT,gBAHa,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Glyphicon } from \"reactstrap\";\n\nimport { toggleFullScreen } from \"../actions/configuration\";\nimport { getContentFromTags } from \"../scripts/organization\";\n\nconst FullscreenButton = (props) => {\n  const character = props.fullScreen ? <b>&#10539;</b> : <b>&#10542;</b>;\n  console.log(getContentFromTags(\"repetitive\", \"kochpinski\"))\n  return (\n    <div>\n      <Button\n        color=\"info\"\n        block\n        outline={!props.fullScreen}\n        \n        onClick={props.toggleFullScreen}\n      >\n        {\"Full Screen     \"}{character}\n      </Button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  fullScreen: state.configuration.fullScreen\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  toggleFullScreen: () => dispatch(toggleFullScreen())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FullscreenButton);\n"]},"metadata":{},"sourceType":"module"}